#!/usr/bin/env python3

import os
import sys
import signal
import time as tm
import json
from datetime import datetime, time, date, timedelta
import subprocess
import contextlib
import requests
import cursor
from geopy.geocoders import Nominatim

# Visit https://home.openweathermap.org/users/sign_up
# to get a free API key.
API_KEY = "YOUR_API_KEY_HERE"

# If you do not paste your API key above, the program
# will ask you for it and save it into the file:
# ~/.config/wthr/api_key

DEBUG = False  # Set with --verbose flag


s_clear_day = [
    "                      ",
    "        ██████        ",
    "    ████      ████    ",
    "    ██          ██    ",
    "  ██              ██  ",
    "  ██              ██  ",
    "  ██              ██  ",
    "    ██          ██    ",
    "    ████      ████    ",
    "        ██████        ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_clear_nig = [
    "                      ",
    "        ██████        ",
    "    ████      ████    ",
    "    ██      ██        ",
    "  ██      ██          ",
    "  ██      ██          ",
    "  ██      ██          ",
    "    ██      ██        ",
    "    ████      ████    ",
    "        ██████        ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_thunder = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████    ██    ████  ",
    "██      ██  ██      ██",
    "██        ██  ██    ██",
    "  ████  ██  ██    ██  ",
    "        ████          ",
    "      ████            ",
    "      ██              ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_tornado = [
    "                      ",
    "      ██████████████  ",
    "                      ",
    "        ██████████    ",
    "                      ",
    "        ██████        ",
    "                      ",
    "        ████          ",
    "                      ",
    "          ██          ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_snow = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██        ██        ██",
    "██      ██  ██      ██",
    "  ██      ██      ██  ",
    "      ██      ██      ",
    "    ██  ██  ██  ██    ",
    "      ██      ██      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_fog = [
    "                      ",
    "                      ",
    "    ██████████████    ",
    "                      ",
    "  ████████████████████",
    "                      ",
    "████████████████████  ",
    "                      ",
    "    ██████████████    ",
    "                      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_smoke = [
    "                      ",
    "                      ",
    "    ██  ██  ██  ██    ",
    "                      ",
    "  ██  ████  ██  ██  ██",
    "                      ",
    "██  ██  ██  ████  ██  ",
    "                      ",
    "    ██  ██  ██  ██    ",
    "                      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_dust = [
    "                      ",
    "██      ██    ██    ██",
    "    ██    ██      ██  ",
    "  ██  ██      ██    ██",
    "    ██      ██  ██    ",
    "██      ██    ██      ",
    "  ██              ██  ",
    "      ██    ██      ██",
    "    ██  ██      ██    ",
    "██    ██      ██  ██  ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_ash = [
    "                      ",
    "██      ██    ██    ██",
    "    ██    ██      ████",
    "  ██████      ██    ██",
    "    ██      ██████    ",
    "██      ██    ██      ",
    "  ██      ██      ██  ",
    "      ██    ██      ██",
    "    ██████      ██    ",
    "██    ██      ██████  ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_squall = [
    "                      ",
    "            ████      ",
    "              ██      ",
    "  ██████████████  ████",
    "                    ██",
    "██████████████████████",
    "                    ██",
    "  ██████████████  ████",
    "              ██      ",
    "            ████      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_clouds = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██                  ██",
    "██      ████        ██",
    "██  ████    ████    ██",
    "  ██            ████  ",
    "  ██            ██    ",
    "    ████████████      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_rain = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██                  ██",
    "██                  ██",
    "  ██████████████████  ",
    "      ██      ██      ",
    "  ██  ██  ██  ██  ██  ",
    "  ██      ██      ██  ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

s_lrain = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██                  ██",
    "██                  ██",
    "  ██████████████████  ",
    "      ██      ██      ",
    "  ██      ██      ██  ",
    "      ██      ██      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

clear = s_clear_day
if time(20, 00) <= datetime.now().time() <= time(23, 59):
    clear = s_clear_nig
elif time(00, 00) <= datetime.now().time() <= time(8, 00):
    clear = s_clear_nig

icons = {"Clear": clear,
         "Clouds": s_clouds,
         "Drizzle": s_lrain,
         "Rain": s_rain,
         "Snow": s_snow,
         "Thunderstorm": s_thunder,
         "Smoke": s_smoke,
         "Dust": s_dust, "Sand": s_dust,
         "Fog": s_fog, "Mist": s_fog, "Haze": s_fog,
         "Ash": s_ash,
         "Squall": s_squall,
         "Tornado": s_tornado}

CENTER = True
S_BUFFER = []

UPDATE_INTERVAL = 3600  # Seconds between weather api calls
CITY = ""
LAT, LON = "", ""
GLOBAL_PACKAGES = []


def main():

    global LAT, LON, CITY, GLOBAL_PACKAGES, DEBUG
    mode = "default"

    # Get input arguments
    arg = args(["location"])
    if "location" not in arg:
        print("\n  Displays weather information from openweathermap.\n"
              "\n"
              "  Usage:           wthr [LOCATION] [OPTIONS] ...\n"
              "  Example:         wthr Dubai\n"
              "\n"
              "  --mode=default   Equivalent to ommiting the '--mode' flag,\n"
              "  -d               shows the current weather for the location.\n"
              "  --mode=forecast  Displays an 8-day forecast for the location,\n"
              "  -f               including minimum and maximum temperatures.\n"
              "  --verbose        Prints debug information whenever an API\n"
              "  -v               call fails due to a key error.\n")
        sys.exit()

    if "--mode" in arg:
        try:
            mode = arg["--mode"]
        except ValueError:
            mode = "default"

    if "-f" in arg:
        mode = "forecast"

    if "--verbose" in arg or "-v" in arg:
        DEBUG = True
        print("Running in debug mode.")
        tm.sleep(1)

    # Setup API key
    setup_api_key()

    # Compute location
    print("Computing latitude and longitude...")
    print("(This might take a while.)")
    arg_str = args_to_csv_string(len(sys.argv))
    CITY, LAT, LON = compute_location(arg_str)

    # 8-DAY FORECAST MODE
    if mode == "forecast":

        # Initial display
        subprocess.call(['tput', 'reset'])
        cursor.hide()
        GLOBAL_PACKAGES = get_daily_forecast()
        if str(GLOBAL_PACKAGES).startswith("KEY_ERROR"):
            print("\n" + str(GLOBAL_PACKAGES))
            cursor.show()
            sys.exit()

        draw_forecast(GLOBAL_PACKAGES)

        # Arm signal handler
        signal.signal(signal.SIGWINCH, forecast_handler)

        # Display loop
        while True:
            try:
                tm.sleep(UPDATE_INTERVAL)
                subprocess.call(['tput', 'reset'])
                cursor.hide()
                GLOBAL_PACKAGES = get_daily_forecast()
                if str(GLOBAL_PACKAGES).startswith("KEY_ERROR"):
                    print("\n" + str(GLOBAL_PACKAGES))
                    cursor.show()
                    sys.exit()
                draw_forecast(GLOBAL_PACKAGES)
            except KeyboardInterrupt:
                subprocess.call(['tput', 'reset'])
                cursor.show()
                sys.exit()

    # REGULAR CURRENT WEATHER MODE
    else:

        # Hide cursor
        cursor.hide()

        # Initial display
        status = recalculate()
        if str(status).startswith("KEY_ERROR"):
            print("\n" + status)
            cursor.show()
            sys.exit()

        redraw()

        # Arm signal handler
        signal.signal(signal.SIGWINCH, default_handler)

        # Display loop
        while True:
            try:
                tm.sleep(UPDATE_INTERVAL)
                status = recalculate()
                if str(status).startswith("KEY_ERROR"):
                    print("\n" + status)
                    cursor.show()
                    sys.exit()
                redraw()
            except KeyboardInterrupt:
                os.system("clear")
                cursor.show()
                sys.exit()


def args_to_csv_string(max_args):
    """
    Converts a list of arguments into a string of comma-separated values.
    Args:
        max_args (int): The maximum number of arguments to be converted.
    Returns:
        str: A string of comma-separated values.
    """
    arguments = [str(arg)
                 for arg
                 in sys.argv[1:max_args+1]]

    return ", ".join([a
                      for a
                      in arguments
                      if not a.startswith("-")])


def default_handler(signum, frame):
    """
    Executes whenever the size of the terminal is changed.
    Calls redraw() in execution to update the screen.
    Args:
        signum (int): The signal number.
        frame (frame): The frame.
    """
    if signum == signal.SIGWINCH:
        redraw()


def forecast_handler(signum, frame):
    """
    Executes whenever the size of the terminal is changed.
    Calls redraw() in execution to update the screen.
    Args:
        signum (int): The signal number.
        frame (frame): The frame.
    """
    if signum == signal.SIGWINCH:
        subprocess.call(['tput', 'reset'])
        cursor.hide()
        draw_forecast(GLOBAL_PACKAGES)


def redraw():
    """
    Clears the screen and redraws the ui.
    """
    os.system("clear")
    print(boxer(S_BUFFER), end="")


def recalculate():
    """
    Obtains the current weather from the openweathermap api and
    updates the global variable s_buffer accordingly.
    """
    global S_BUFFER

    # Make the API call and load the response
    url = "https://api.openweathermap.org/data/2.5/" + \
          f"onecall?lat={LAT}&lon={LON}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = json.loads(response.text)

    # Parse weather data and temperature
    try:
        status = data["current"]["weather"][0]["main"]
        temp = data["current"]["temp"]
        temp = str(temp).split(".", maxsplit=1)[0]

    except KeyError:

        ret_val = "KEY_ERROR in recalculate(): Invalid API key."

        if DEBUG:
            ret_val += "\n - DEBUG INFORMATION FOLLOWS - \n"
            ret_val += str(json.dumps(data, indent=4, sort_keys=True))

        return ret_val

    # Update global vars
    S_BUFFER = icons[status]
    S_BUFFER[-1] = f"{CITY}"
    S_BUFFER[-2] = temp + "°C"

    return 0


def get_daily_forecast():

    global S_BUFFER

    # Make the API call and load the response
    url = "https://api.openweathermap.org/data/2.5/" + \
        f"onecall?lat={LAT}&lon={LON}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = json.loads(response.text)

    try:
        mins = [int(data["daily"][x]["temp"]["min"]) + 1
                for x
                in range(8)]

        maxs = [int(data["daily"][x]["temp"]["max"]) + 1
                for x
                in range(8)]

        wthr = [data["daily"][x]["weather"][0]["main"]
                for x
                in range(8)]

    except KeyError:

        ret_val = "KEY_ERROR in get_daily_forecast(): Invalid API key."

        if DEBUG:
            ret_val += "\n - DEBUG INFORMATION FOLLOWS - \n"
            ret_val += str(json.dumps(data, indent=4, sort_keys=True))

        return ret_val

    # Format the data into lists of strings
    S_BUFFER = []
    for i in range(8):
        S_BUFFER.append(f"{wthr[i]}")
        S_BUFFER.append(f"{mins[i]}°C")
        S_BUFFER.append(f"{maxs[i]}°C")

    # Package the data to be returned
    packages = []
    i = 0
    for wthr, min_temp, max_temp in zip(wthr, mins, maxs):

        package = []

        dia = str(date.today() + timedelta(days=i))
        dia = "/".join(dia.split("-")[::-1])

        package.append(dia.center(22))
        icono = icons[wthr][:-2]

        package += [line.center(22)
                    for line
                    in icono]

        package.append((f"| ▼ {min_temp}ºC || ▲ {max_temp}ºC |").center(22))
        if i == 7:
            package.append("")
        else:
            package.append("")
            package.append("")

        packages.append(package)

        i += 1

    return packages  # To be printed with draw_forecast()


def draw_forecast(pkgs):

    terminal_size = os.get_terminal_size()

    pack1, pack2 = packer(pkgs[0], pkgs[1]), packer(pkgs[2], pkgs[3])
    pack3, pack4 = packer(pkgs[4], pkgs[5]), packer(pkgs[6], pkgs[7])

    if terminal_size.columns >= 112:  # 22*4 + 8*3 | 4 columns

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_lines = terminal_size.lines
        text_len = 2*len(pack1) + 2
        print("\n"*int((term_lines-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(terminal_size.columns))
        print("")

        center_printer(terminal_size, packer(pack1, pack2))
        print("")
        center_printer(terminal_size, packer(pack3, pack4)[:-1])

    elif terminal_size.columns >= 82:  # 22*3 + 8*2 | 3 columns

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_lines = terminal_size.lines
        text_len = 3*len(pack1) + 1
        print("\n"*int((term_lines-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(terminal_size.columns))
        print("")

        center_printer(terminal_size, packer(
            packer(pkgs[0], pkgs[1]), pkgs[2]))
        center_printer(terminal_size, packer(
            packer(pkgs[3], pkgs[4]), pkgs[5]))
        center_printer(terminal_size, packer(pkgs[6], pkgs[7])[:-1])

    elif terminal_size.columns >= 52:  # 22*2 + 8*1 | 2 columns

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_lines = terminal_size.lines
        text_len = 4*len(pack1) + 1
        print("\n"*int((term_lines-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(terminal_size.columns))
        print("")

        center_printer(terminal_size, pack1)
        center_printer(terminal_size, pack2)
        center_printer(terminal_size, pack3)
        center_printer(terminal_size, pack4[:-1])

    elif terminal_size.columns >= 22:  # 22*1 + 8*0 | 1 column

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_lines = terminal_size.lines
        text_len = 8*len(pack1) + 1
        print("\n"*int((term_lines-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(terminal_size.columns))
        print("")

        for i in range(8):
            if i != 7:
                center_printer(terminal_size, pkgs[i])
            else:
                center_printer(terminal_size, pkgs[i][:-1])

    else:  # 0 columns (no space for the forecast)

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_lines = terminal_size.lines
        text_len = 3
        print("\n"*int((term_lines-text_len)/2), end="")

        center_printer(terminal_size, [
                       "Not enough space!", "", "[Min width: 22]"])


def center_printer(terminal_size, list_of_strings):
    """
    Prints a list of strings centered.
    Args:
        list_of_strings (list): A list of strings.
    """
    for string in list_of_strings:
        print(string.center(terminal_size.columns))


def boxer(lines):
    """
    Creates a box of the terminal size, enclosing the lines
    passed in as a list of tuples.
    Args:
        lines (list): A list of tuples, each containing a line and a boolean.
        The line is the text to be displayed, and the boolean is whether
        the line should be centered.
    Returns:
        str: A string of the box with the lines fitted in.
    """
    string = ""

    # Compute terminal size
    size = os.get_terminal_size()
    width = size.columns
    height = size.lines

    # Add the right amount of empty lines to vertically center the content
    if CENTER:
        print("\n" * int((height/2) - ((len(lines)-2)/2)), end="")

    # Print the lines horizontally centered
    for line in lines:
        line_len = len(line)

        if line_len > width - 3:
            line = line[:width - 3] + "..."

        formatted_line = line.center(width)
        string += formatted_line + "\n"

    return string


API_FILE = os.path.expanduser("~") + "/.config/wthr/api_key"


def setup_api_key():

    global API_KEY

    if str(test_api_key(API_KEY)).startswith("OK"):

        # DO NOTHING IF API KEY IS ALREADY SET
        return

    if os.path.isfile(API_FILE):

        # UPDATE THE KEY FROM THE FILE IF THE FILE EXISTS
        with open(API_FILE, "r", encoding='utf-8') as file:
            API_KEY = file.readline().strip()

    else:

        subprocess.call(['tput', 'reset'])

        # ASK FOR THE API KEY
        print("")
        center_printer(os.get_terminal_size(), ["INITIAL SETUP"])
        print("\nPlease visit https://home.openweathermap.org/users/sign_up \n"
              "to get a free API key.\n")

        # CHECK ITS VALIDITY
        valid = "KEY_ERROR in setup_api_key(): Untested."
        while valid.startswith("KEY_ERROR"):
            try:
                aux_key = input("[Enter your API key]: ")
            except KeyboardInterrupt:
                subprocess.call(['tput', 'reset'])
                sys.exit()

            print("")
            valid = test_api_key(aux_key)
            if valid.startswith("KEY_ERROR"):
                print(valid)

        # CREATE THE FOLDERS ALONG THE ROUTE AND WRITE THE API KEY
        os.makedirs(os.path.dirname(API_FILE), exist_ok=True)
        with open(API_FILE, "w", encoding='utf-8') as file:
            file.write(aux_key)

        # UPDATE THE GLOBAL VARIABLE
        API_KEY = aux_key


def test_api_key(test_key):

    url = "https://api.openweathermap.org/data/2.5/" + \
        f"onecall?lat=0&lon=0&appid={test_key}&units=metric"
    response = requests.get(url)
    data = json.loads(response.text)

    try:
        _ = data["current"]["weather"][0]["main"]
        return "OK"

    except KeyError:

        ret_val = "KEY_ERROR in test_api_key(): Invalid API key."

        if DEBUG:
            ret_val += "\n - DEBUG INFORMATION FOLLOWS - \n"
            ret_val += str(json.dumps(data, indent=4, sort_keys=True))

        return ret_val


def args(positional=None):
    """
    $: program joe 1234 -keep -host=127.0.0.1

    dictionary = args(["username", "password"])

    >> username:    joe
    >> password:    1234
    >> -keep:       True
    >> -host:       127.0.0.1
    """
    positional = positional or []
    args_dict = {}

    # Store positional arguments
    tail = len(positional)
    for i, pos_arg in enumerate(positional):
        with contextlib.suppress(IndexError):
            if str(sys.argv[i+1]).startswith("-"):
                tail = i
                break
            value = sys.argv[i+1]
            args_dict[pos_arg] = value

    # Store flags
    for i in range(tail+1, len(sys.argv)):
        try:
            value = str(sys.argv[i]).split("=")[1]
        except IndexError:
            value = True
        args_dict[str(sys.argv[i]).split("=", maxsplit=1)[0]] = value

    return args_dict


def packer(list1, list2):

    list_return = []

    for str1, str2 in zip(list1, list2):
        str_aux = str1 + "        " + str2
        list_return.append(str_aux)

    return list_return


def compute_location(city_str):
    """
    Computes the latitude and longitude of a city.
    Args:
        city_str (str): A string of the city and country code.
    Returns:
        tuple: A tuple of the latitude and longitude.
    """
    while True:
        try:
            # Throws timeout exception if the API call takes too long
            provider = Nominatim(user_agent="wthr")
            location = provider.geocode(city_str)

            # Throws AttributeError if location is None (no location found)
            lat = location.latitude
            lon = location.longitude
            city = location.address.split(",")[0]
            break

        # Clean exit if user presses Ctrl+C
        except KeyboardInterrupt:
            os.system("clear")
            cursor.show()
            sys.exit()

        # Clean exit if the location could not be found
        except AttributeError:
            os.system("clear")
            print(f"Could not find location of {city_str}.")
            cursor.show()
            sys.exit()

        # Retry if the API call fails
        except Exception:
            tm.sleep(1)

    return city, lat, lon


if __name__ == "__main__":
    main()
