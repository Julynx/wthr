#!/usr/bin/env python3

from ast import For
from glob import glob
import os
import sys
import signal
import cursor
import time as tm
import requests
import json
from datetime import datetime, time, date, timedelta
from geopy.geocoders import Nominatim
import contextlib
import subprocess

# Visit https://home.openweathermap.org/users/sign_up
# to get a free API key.
api_key = "YOUR_API_KEY_HERE"

# If you do not paste your API key above, the program
# will ask you for it and save it into the file:
# ~/.config/wthr/api_key

# Size = 13
s_clear_day = [
    "                      ",
    "        ██████        ",
    "    ████      ████    ",
    "    ██          ██    ",
    "  ██              ██  ",
    "  ██              ██  ",
    "  ██              ██  ",
    "    ██          ██    ",
    "    ████      ████    ",
    "        ██████        ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

# Size = 13
s_clear_nig = [
    "                      ",
    "        ██████        ",
    "    ████      ████    ",
    "    ██      ██        ",
    "  ██      ██          ",
    "  ██      ██          ",
    "  ██      ██          ",
    "    ██      ██        ",
    "    ████      ████    ",
    "        ██████        ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

# Size = 13
s_thunder = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████    ██    ████  ",
    "██      ██  ██      ██",
    "██        ██  ██    ██",
    "  ████  ██  ██    ██  ",
    "        ████          ",
    "      ████            ",
    "      ██              ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

#Size = 13
s_snow = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██        ██        ██",
    "██      ██  ██      ██",
    "  ██      ██      ██  ",
    "      ██      ██      ",
    "    ██  ██  ██  ██    ",
    "      ██      ██      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]


# Size = 13
s_fog = [
    "                      ",
    "                      ",
    "    ██████████████    ",
    "                      ",
    "  ████████████████████",
    "                      ",
    "████████████████████  ",
    "                      ",
    "    ██████████████    ",
    "                      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

# Size = 13
s_clouds = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██                  ██",
    "██      ████        ██",
    "██  ████    ████    ██",
    "  ██            ████  ",
    "  ██            ██    ",
    "    ████████████      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

# Size = 13
s_rain = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██                  ██",
    "██                  ██",
    "  ██████████████████  ",
    "      ██      ██      ",
    "  ██  ██  ██  ██  ██  ",
    "  ██      ██      ██  ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

# Size = 13
s_lrain = [
    "                      ",
    "        ██████        ",
    "      ██      ██      ",
    "  ████          ████  ",
    "██                  ██",
    "██                  ██",
    "  ██████████████████  ",
    "      ██      ██      ",
    "  ██      ██      ██  ",
    "      ██      ██      ",
    "                      ",
    "        -temp-        ",
    "        -city-        ",
]

clear = s_clear_nig if time(8, 00) <= datetime.now().time() >= time(20, 00) \
    else s_clear_day

icons = {"Clear": clear,
         "Clouds": s_clouds,
         "Drizzle": s_lrain,
         "Rain": s_rain,
         "Snow": s_snow,
         "Thunderstorm": s_thunder,
         "Mist": s_fog, "Smoke": s_fog, "Haze": s_fog, "Dust": s_fog,
         "Fog": s_fog, "Sand": s_fog, "Ash": s_fog, "Squall": s_fog,
         "Tornado": s_fog}

center = True
s_buffer = []

update_interval = 3600  # Seconds between weather api calls
city = ""
lat, lon = "", ""
global_packages = []


def main():

    global lat, lon, city, global_packages
    mode = "default"

    # Get input arguments
    arg = args(["location"])
    if "location" not in arg.keys():
        print("\n  Displays weather information from openweathermap.\n"
              "\n"
              "  Usage:           wthr [LOCATION] [OPTIONS] ...\n"
              "  Example:         wthr Dubai\n"
              "\n"
              "  --mode=default   Equivalent to ommiting the '--mode' flag,\n"
              "  -d               shows the current weather for the location.\n"
              "  --mode=forecast  Displays an 8-day forecast for the location,\n"
              "  -f               including minimum and maximum temperatures.\n")
        exit()

    if "--mode" in arg.keys():
        try:
            mode = arg["--mode"]
        except ValueError:
            mode = "default"

    if "-f" in arg.keys():
        mode = "forecast"

    # Setup API key
    setup_api_key()

    # Compute location
    print("Computing latitude and longitude...")
    print("(This might take a while.)")
    arg_str = args_to_csv_string(len(sys.argv))
    city, lat, lon = compute_location(arg_str)

    # 8-DAY FORECAST MODE
    if mode == "forecast":

        # Arm signal handler
        signal.signal(signal.SIGWINCH, forecast_handler)

        # Initial display
        subprocess.call(['tput', 'reset'])
        cursor.hide()
        global_packages = get_daily_forecast()
        if str(global_packages).startswith("KEY_ERROR"):
            print("\n" + str(global_packages))
            cursor.show()
            exit()
        draw_forecast(global_packages)

        # Display loop
        while True:
            try:
                tm.sleep(update_interval)
                subprocess.call(['tput', 'reset'])
                cursor.hide()
                global_packages = get_daily_forecast()
                if str(global_packages).startswith("KEY_ERROR"):
                    print("\n" + str(global_packages))
                    cursor.show()
                    exit()
                draw_forecast(global_packages)
            except KeyboardInterrupt:
                subprocess.call(['tput', 'reset'])
                cursor.show()
                exit()

    # REGULAR CURRENT WEATHER MODE
    else:
        # Arm signal handler
        signal.signal(signal.SIGWINCH, default_handler)

        # Hide cursor
        cursor.hide()

        # Initial display
        status = recalculate()
        if str(status).startswith("KEY_ERROR"):
            print("\n" + status)
            cursor.show()
            exit()

        redraw()

        # Display loop
        while True:
            try:
                tm.sleep(update_interval)
                status = recalculate()
                if str(status).startswith("KEY_ERROR"):
                    print("\n" + status)
                    cursor.show()
                    exit()
                redraw()
            except KeyboardInterrupt:
                os.system("clear")
                cursor.show()
                exit()


def args_to_csv_string(max_args):
    """
    Converts a list of arguments into a string of comma-separated values.
    Args:
        max_args (int): The maximum number of arguments to be converted.
    Returns:
        str: A string of comma-separated values.
    """
    args = sys.argv[1:]
    args = args[:max_args]
    args = [str(arg) for arg in args]

    new_args = []

    for arg in args:
        if "--mode" in arg:
            arg = ""
        new_args.append(arg)

    return ", ".join(new_args)


def default_handler(signum, frame):
    """
    Executes whenever the size of the terminal is changed.
    Calls redraw() in execution to update the screen.
    Args:
        signum (int): The signal number.
        frame (frame): The frame.
    """
    if signum == signal.SIGWINCH:
        redraw()


def forecast_handler(signum, frame):
    """
    Executes whenever the size of the terminal is changed.
    Calls redraw() in execution to update the screen.
    Args:
        signum (int): The signal number.
        frame (frame): The frame.
    """
    if signum == signal.SIGWINCH:
        subprocess.call(['tput', 'reset'])
        cursor.hide()
        draw_forecast(global_packages)


def redraw():
    """
    Clears the screen and redraws the ui.
    """
    os.system("clear")
    print(boxer(s_buffer), end="")


def recalculate():
    """
    Obtains the current weather from the openweathermap api and
    updates the global variable s_buffer accordingly.
    """
    global s_buffer, api_key    # Weather api key and buffer
    global lat, lon, city       # Location data

    # Make the API call and load the response
    url = "https://api.openweathermap.org/data/2.5/" \
        "onecall?lat=%s&lon=%s&appid=%s&units=metric" % (lat, lon, api_key)
    response = requests.get(url)
    data = json.loads(response.text)

    # Parse weather data and temperature
    try:
        status = data["current"]["weather"][0]["main"]
        temp = data["current"]["temp"]
        temp = str(temp).split(".")[0]
    except KeyError:
        return "KEY_ERROR: Invalid API key."

    # Update global vars
    s_buffer = icons[status]
    s_buffer[-1] = f"{city}"
    s_buffer[-2] = temp + "°C"


def get_daily_forecast():

    global s_buffer, api_key    # Weather api key and buffer
    global lat, lon, city       # Location data

    # Make the API call and load the response
    url = "https://api.openweathermap.org/data/2.5/" \
        "onecall?lat=%s&lon=%s&appid=%s&units=metric" % (lat, lon, api_key)
    response = requests.get(url)
    data = json.loads(response.text)

    try:
        mins = [int(data["daily"][x]["temp"]["min"]) + 1 for x in range(8)]
        maxs = [int(data["daily"][x]["temp"]["max"]) + 1 for x in range(8)]
        wthr = [data["daily"][x]["weather"][0]["main"] for x in range(8)]

    except KeyError:
        return "KEY_ERROR: Invalid API key."

    # Format the data into lists of strings
    s_buffer = []
    for i in range(8):
        s_buffer.append(f"{wthr[i]}")
        s_buffer.append(f"{mins[i]}°C")
        s_buffer.append(f"{maxs[i]}°C")

    # Package the data to be returned
    packages = []
    i = 0
    for wthr, x, y in zip(wthr, mins, maxs):

        package = []

        dia = str(date.today() + timedelta(days=i))
        dia = "/".join(dia.split("-")[::-1])

        package.append(dia.center(22))
        icono = icons[wthr][:-2]

        for line in icono:
            package.append(line.center(22))

        package.append((f"| ▼ {x}ºC || ▲ {y}ºC |").center(22))
        if i == 7:
            package.append("")
        else:
            package.append("")
            package.append("")

        packages.append(package)

        i += 1

    return packages  # To be printed with draw_forecast()


def draw_forecast(pkgs):

    pack1, pack2 = packer(pkgs[0], pkgs[1]), packer(pkgs[2], pkgs[3])
    pack3, pack4 = packer(pkgs[4], pkgs[5]), packer(pkgs[6], pkgs[7])

    if os.get_terminal_size().columns >= 112:  # 22*4 + 8*3 | 4 columns

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_size = os.get_terminal_size().lines
        text_len = 2*len(pack1) + 2
        print("\n"*int((term_size-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(os.get_terminal_size().columns))
        print("")

        center_printer(packer(pack1, pack2))
        print("")
        center_printer(packer(pack3, pack4)[:-1])

    elif os.get_terminal_size().columns >= 82:  # 22*3 + 8*2 | 3 columns

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_size = os.get_terminal_size().lines
        text_len = 3*len(pack1) + 1
        print("\n"*int((term_size-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(os.get_terminal_size().columns))
        print("")

        center_printer(packer(packer(pkgs[0], pkgs[1]), pkgs[2]))
        center_printer(packer(packer(pkgs[3], pkgs[4]), pkgs[5]))
        center_printer(packer(pkgs[6], pkgs[7])[:-1])

    elif os.get_terminal_size().columns >= 52:  # 22*2 + 8*1 | 2 columns

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_size = os.get_terminal_size().lines
        text_len = 4*len(pack1) + 1
        print("\n"*int((term_size-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(os.get_terminal_size().columns))
        print("")

        center_printer(pack1)
        center_printer(pack2)
        center_printer(pack3)
        center_printer(pack4[:-1])

    elif os.get_terminal_size().columns >= 22:  # 22*1 + 8*0 | 1 column

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_size = os.get_terminal_size().lines
        text_len = 8*len(pack1) + 1
        print("\n"*int((term_size-text_len)/2), end="")

        print("")
        print("8-DAY FORECAST".center(os.get_terminal_size().columns))
        print("")

        for i in range(8):
            if i != 7:
                center_printer(pkgs[i])
            else:
                center_printer(pkgs[i][:-1])

    else:  # 0 columns (no space for the forecast)

        # PADDING TO VERTICALLY CENTER THE CONTENT
        term_size = os.get_terminal_size().lines
        text_len = 3
        print("\n"*int((term_size-text_len)/2), end="")

        center_printer(["Not enough space!", "", "[Min width: 22]"])


def center_printer(list_of_strings):
    """
    Prints a list of strings centered.
    Args:
        list_of_strings (list): A list of strings.
    """
    for string in list_of_strings:
        print(string.center(os.get_terminal_size().columns))


def boxer(lines):
    """
    Creates a box of the terminal size, enclosing the lines
    passed in as a list of tuples.
    Args:
        lines (list): A list of tuples, each containing a line and a boolean.
        The line is the text to be displayed, and the boolean is whether
        the line should be centered.
    Returns:
        str: A string of the box with the lines fitted in.
    """
    string = ""

    # Compute terminal size
    size = os.get_terminal_size()
    width = size.columns
    height = size.lines

    # Add the right amount of empty lines to vertically center the content
    if center:
        print("\n" * int((height/2) - ((len(lines)-2)/2)), end="")

    # Print the lines horizontally centered
    for line in lines:
        line_len = len(line)

        if line_len > width - 3:
            line = line[:width - 3] + "..."

        formatted_line = line.center(width)
        string += formatted_line + "\n"

    return string


API_FILE = os.path.expanduser("~") + "/.config/wthr/api_key"


def setup_api_key():

    global api_key

    if test_api_key(api_key):

        # DO NOTHING IF API KEY IS ALREADY SET
        return

    elif os.path.isfile(API_FILE):

        # UPDATE THE KEY FROM THE FILE IF THE FILE EXISTS
        with open(API_FILE, "r") as f:
            api_key = f.readline().strip()

    else:

        subprocess.call(['tput', 'reset'])

        # ASK FOR THE API KEY
        print("")
        center_printer(["INITIAL SETUP"])
        print("\nPlease visit https://home.openweathermap.org/users/sign_up \n"
              "to get a free API key.\n")

        # CHECK ITS VALIDITY
        valid = False
        while not valid:
            try:
                aux_key = input("[Enter your API key]: ")
            except KeyboardInterrupt:
                subprocess.call(['tput', 'reset'])
                exit()

            print("")
            valid = test_api_key(aux_key)
            if not valid:
                print("Invalid API key!")

        # CREATE THE FOLDERS ALONG THE ROUTE AND WRITE THE API KEY
        os.makedirs(os.path.dirname(API_FILE), exist_ok=True)
        with open(API_FILE, "w") as f:
            f.write(aux_key)

        # UPDATE THE GLOBAL VARIABLE
        api_key = aux_key


def test_api_key(test_key):

    try:
        url = "https://api.openweathermap.org/data/2.5/" \
            "onecall?lat=%s&lon=%s&appid=%s&units=metric" % (0, 0, test_key)
        response = requests.get(url)
        data = json.loads(response.text)
        data["current"]["weather"][0]["main"]
        return True
    except:
        return False


def args(positional=[]):
    """
    $: program joe 1234 -keep -host=127.0.0.1

    dictionary = args(["username", "password"])

    >> username:    joe
    >> password:    1234
    >> -keep:       True
    >> -host:       127.0.0.1
    """
    args_dict = {}

    # Store positional arguments
    tail = len(positional)
    for i, pos_arg in enumerate(positional):
        with contextlib.suppress(IndexError):
            if str(sys.argv[i+1]).startswith("-"):
                tail = i
                break
            value = sys.argv[i+1]
            args_dict[pos_arg] = value

    # Store flags
    for i in range(tail+1, len(sys.argv)):
        try:
            value = str(sys.argv[i]).split("=")[1]
        except IndexError:
            value = True
        args_dict[str(sys.argv[i]).split("=")[0]] = value

    return args_dict


def packer(list1, list2):

    list_return = []

    for str1, str2 in zip(list1, list2):
        str_aux = str1 + "        " + str2
        list_return.append(str_aux)

    return list_return


def compute_location(city_str):
    """
    Computes the latitude and longitude of a city.
    Args:
        city_str (str): A string of the city and country code.
    Returns:
        tuple: A tuple of the latitude and longitude.
    """
    while True:
        try:
            # Throws timeout exception if the API call takes too long
            g = Nominatim(user_agent="wthr")
            location = g.geocode(city_str)

            # Throws AttributeError if location is None (no location found)
            lat = location.latitude
            lon = location.longitude
            city = location.address.split(",")[0]
            break

        # Clean exit if user presses Ctrl+C
        except KeyboardInterrupt:
            os.system("clear")
            cursor.show()
            exit()

        # Clean exit if the location could not be found
        except AttributeError:
            os.system("clear")
            print("Could not find location of %s." % city_str)
            cursor.show()
            exit()

        # Retry if the API call fails
        except:
            tm.sleep(1)
            pass

    return city, lat, lon


if __name__ == "__main__":
    main()
